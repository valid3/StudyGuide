# NOT FINISHED
# DO NOT USE

# Imports
import tkinter
import customtkinter
import json
import random
import sys

# Pre-Setup
root = customtkinter.CTk()
root.geometry('851x550')
root.title('Study Guide Main')
root.resizable(False, False)
problems = {}
restartProblems = {}

currentRow = 0
rightWrong = False
with open('guides.json', "r") as guides:
    currentGuides = json.load(guides)

guidesMain = customtkinter.CTkFrame(master=root, width=240, height=540, border_width=3, border_color='#1C1C1C')
topInformation = customtkinter.CTkFrame(master=root, width=596, height=60, border_width=3, border_color='#1C1C1C')
answeringFrame = customtkinter.CTkFrame(master=root, width=596, height=411, border_width=3, border_color='#1C1C1C')
optionsFrame = customtkinter.CTkFrame(master=root, width=596, height=60, border_width=3, border_color='#1C1C1C')

guidesScrollFrame = customtkinter.CTkScrollableFrame(master=guidesMain, width=215, height=528, corner_radius=3,
                                                     fg_color='#2B2B2B', scrollbar_button_color='#242424',
                                                     scrollbar_button_hover_color='#333333')
questionMain = customtkinter.CTkLabel(master=answeringFrame, width=578, height=65, corner_radius=3, fg_color='#242424',
                                      font=('Arial', 22),
                                      text="Press the 'Load' button on any of the guides on the left. If you see none, run setup_up.py! Enjoy!",
                                      wraplength=550)
informationName = customtkinter.CTkLabel(master=topInformation, width=285, height=54, font=('Arial Baltic', 25),
                                         text='Name: None', anchor='w')
problemsLeft = customtkinter.CTkLabel(master=topInformation, width=285, height=54, font=('Arial Baltic', 25),
                                      text='Problems: None', anchor='e')
answerEntry = customtkinter.CTkEntry(master=answeringFrame, width=385, height=35, placeholder_text='Answer Here')
submitButton = customtkinter.CTkButton(master=answeringFrame, width=120, height=45, fg_color='#242424',
                                       font=('Arial', 22), text='Submit')
restartButton = customtkinter.CTkButton(master=answeringFrame, width=120, height=45, fg_color='#242424',
                                        font=('Arial', 22), text='Restart')

# Setup
guidesMain.place(x=5, y=5)
topInformation.place(x=250, y=5)
answeringFrame.place(x=250, y=70)
optionsFrame.place(x=250, y=485)

guidesScrollFrame.place(x=3, y=3)
questionMain.place(x=9, y=9)
informationName.place(x=9, y=3)
problemsLeft.place(x=302, y=3)
answerEntry.place(x=106, y=90)
submitButton.place(x=175, y=131)
restartButton.place(x=301, y=131)


# Functions
def algo(answer):
    if type(answer) != int:
        aMain = str(answer.lower())
        special_characters = '!@#$%^&*()-_=+[{]};:.>/?`~'
        for char in special_characters:
            aMain = aMain.replace(char, '')
        return aMain.split()
    else:
        return [str(answer)]


def misspellings(s):
    forward = []
    new_list = list(s).copy()
    for index in range(len(s) - 1):
        old = new_list[index]
        if new_list[index + 1] != old:
            new_list[index], new_list[index + 1] = new_list[index + 1], old
            forward.append(''.join(new_list))
            new_list = list(s).copy()
    return forward


def give():
    if problems:
        problemsLeft.configure(text=f'Problems: {len(problems)}')
        question = random.choice(list(problems.keys()))
        questionMain.configure(text=question)

def submit():
    global rightWrong

    if not rightWrong:
        try:
            for word, misspellings in problems[questionMain.cget('text')]["MISSPELLINGS"].items():
                if word not in misspellings:
                    for user_word in algo(answerEntry.get()):
                        if user_word in misspellings:
                            questionMain.configure(text="Correct! Be sure to check your spelling! Press 'Submit' again for the next question!", text_color='yellow')
                        else:
                            try:
                                if all(x in algo(answerEntry.get()) for x in problems[questionMain.cget('text')]['ANSWERS']):
                                    problems.pop(questionMain.cget('text'))
                                    questionMain.configure(text="Correct! Press 'Submit' again for the next question!", text_color='green')
                                else:
                                    wrongAnswer = questionMain.cget('text')
                                    questionMain.configure(text=f"Wrong! The answer is {' '.join(problems[questionMain.cget('text')]['ANSWERS'])}! Press 'Submit' again for the next question!", text_color='red')
                                    problems.pop(wrongAnswer)
                                rightWrong = True
                            except:
                                tkinter.messagebox.showinfo('Error', 'No guide is loaded. Please load a guide on the left!')
        except:
            tkinter.messagebox.showinfo('Error', 'No guide is loaded. Please load a guide on the left!')
        else:
            questionMain.configure(text_color='white')
            answerEntry.delete(0, 'end')
            rightWrong = False
            give()

def load(name, answers):
    global problems
    global restartProblems

    if tkinter.messagebox.askyesno("Load",
                                   f"Are you sure you want to load '{name}'? Any other guides will stop running."):
        informationName.configure(text=f'Name: {name}')

        problems = answers.copy()

        for q, a in problems.items():
            problems[q] = {"ANSWERS": a}
            problems[q]["ANSWERS"] = algo(problems[q]["ANSWERS"])
            problems[q]["MISSPELLINGS"] = {}

        for ques, ans in problems.items():
            for word in ans["ANSWERS"]:
                if not type(word) is int:
                    if len(word) >= 4:
                        problems[ques]["MISSPELLINGS"][word] = misspellings(word)
        restartProblems = problems.copy()
        give()


def restart():
    global problems
    if tkinter.messagebox.askyesno("Load", f"Are you sure you want to restart '{informationName.cget('text')[:4]}'?"):
        informationName.configure(text=f'Name: {name}')
        problems = restartProblems.copy()
        give()


for name, answers in currentGuides.items():
    guideFrame = customtkinter.CTkFrame(master=guidesScrollFrame, width=210, height=61, fg_color="#242424")
    guideName = customtkinter.CTkLabel(master=guideFrame, text=f'Guide Name: {name}', width=146, height=26,
                                       fg_color='#333333', font=('Arial', 14), corner_radius=5, anchor='w')
    problemsLeftText = customtkinter.CTkLabel(master=guideFrame, text=f'Problems: {len(answers)}', width=146, height=25,
                                              fg_color='#333333', font=('Arial', 14), corner_radius=5, anchor='w')
    loadButton = customtkinter.CTkButton(master=guideFrame, width=54, height=54, text='Load', corner_radius=5,
                                         font=('Arial', 17), fg_color='#333333')

    loadButton.configure(command=lambda loadName=name, loadAnswers=answers: load(loadName, loadAnswers))
    restartButton.configure(command=restart)

    guideFrame.grid(row=currentRow, column=0, padx=3, pady=3)
    guideName.place(x=3, y=3)
    problemsLeftText.place(x=3, y=33)
    loadButton.place(x=153, y=3)

    if len(name) > 7:
        guideName.configure(text=f'Guide Name: {name[0:6]}...')

    currentRow += 1

submitButton.configure(command=submit)
root.mainloop()
